#using with option '-f filename' because file is not named: rakefile, Rakefile, rakefile.rb, Rakefile.rb

rake -f some_file.rake other_task

#when using here, we don't put colons(:) before name of tasks
#we don't need to use '-f' because task is defined in one of default-named file(rakefile.rb)
#usage: rake task_name
rake first


#it will run prerequisites before itself
rake need_preqs
I'm needed! #from task: preq1
I'm needed too! #from task preq2
I run every preqs #from task need_preqs



#|args_task| takes 2 arguments[any type] and shows it to user
#rake taskname[arg1,arg2,...]
#no spaces aside rake AND task_name
rake args_task[2,4]



//dependency_loop branch
#after changing name of last task[args_task] to "need_preqs", last task was added at the end of need_preqs. In the end this task want to run itself.
I'm needed!
I'm needed too!
rake aborted!
Circular dependency detected: TOP => need_preqs => need_preqs

Tasks: TOP => need_preqs
(See full trace by running task with --trace)


//dependency_loop branch
changed name of duplicated task - that task that require itself

#branch merged


#add defaults, without it, task returns nil(s) if argument is not passed


#adds 'deafault' task with additional block(you don't have to add do..end block)


#invoke method takes argguments as normal ruby method
rake invoke_me[4,3]


#directory create folder with the same name as his argument
rake ".lol"
#mkdir -p .lol

#file-> like task can be included[as prerequisite]

#clean/clobber ->build in rake cleaning tools
rake clean
rake clobber